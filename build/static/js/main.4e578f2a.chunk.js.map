{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Filter","props","value","filtered","onChange","event","filteredList","persons","forEach","p","name","includes","target","push","setFiltered","PersonForm","onSubmit","addPerson","newName","handleNameChange","newNumber","handlenumberChange","type","Person","number","removePerson","onClick","Persons","map","person","i","key","filter","Notification","message","className","App","useState","setPersons","setNewName","setNewNumber","alertMessage","setalertMessage","errorMessage","seterrorMessage","useEffect","personService","initialPersons","preventDefault","exists","personObject","window","confirm","returnedPerson","catch","error","setTimeout","concat","removedPerson","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4e578f2a.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n  }\n  \n  const create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n  }\n  \n  const remove = id => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n  }\n\n  const update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n  }\n  \nexport default { getAll, create, update, remove }","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\n\nconst Filter = (props) => {\n  const handleFilterChange = (event) => {\n      var filteredList = []\n      props.persons.forEach(p => {\n          if(!p.name.includes(event.target.value)){\n              filteredList.push(p.name)\n          }\n      })\n      props.setFiltered(filteredList)\n  }\n  return(\n      <div>\n        filter: <input \n                value={props.filtered} \n                onChange={handleFilterChange} \n              />\n      </div>)\n}\n\nconst PersonForm = (props) => {\n  return(\n      <form onSubmit={props.addPerson}>\n      <div>\n      name: <input \n              value={props.newName} \n              onChange={props.handleNameChange} \n              />\n      </div>\n      <div>\n      number: <input \n              value={props.newNumber} \n              onChange={props.handlenumberChange} \n      />\n      </div>\n      <div>\n      <button type=\"submit\">add</button>\n      </div>\n  </form>\n  )}\n\n\nconst Person = ({name, number, removePerson}) => {\n  return (\n      <div>\n        {name} {number} <button onClick={removePerson}>\n            delete\n          </button>\n      </div>\n  )\n}\n\nconst Persons = ({persons, filtered, removePerson}) => {\n\n  const filter = (person) => {\n    if(!filtered.includes(person.name)){\n      return(\n        <div key = {person.id} >\n          <Person \n            name = {person.name}\n            number = {person.number}\n            removePerson = {() => removePerson(person)}\n          />\n        </div>\n      )\n    }\n    return(false)\n  }\n  return(\n      <ul>\n        {persons.map((person, i) => \n          filter(person, i)\n        )}\n      </ul>\n  )}\n\n  const Notification = ({ message, type }) => {\n    if (message === null) {\n      return null\n    }\n  \n    return (\n      <div className={type}>\n        {message}\n      </div>\n    )\n  }\n\nconst App = () => {\n  const [ persons, setPersons] = useState([])\n  const [ filtered, setFiltered ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [alertMessage, setalertMessage] = useState(null)\n  const [errorMessage, seterrorMessage] = useState(null)\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n  const addPerson = (event) => {\n    event.preventDefault()\n    var exists = false\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n    persons.forEach(p =>{\n      if(newName === p.name){\n        exists = true\n        if (window.confirm(`${p.name} already exists. replace number?`)) {   \n          personService\n            .update(p.id, personObject)\n            .then(returnedPerson => {\n              setPersons(persons.map(person => person.id !== p.id ? person : returnedPerson))\n              setNewName('')\n              setNewNumber('')\n            })\n            .catch(error => {\n              seterrorMessage(\n                `information of ${p.name} has already been removed from server`\n              )\n              setTimeout(() => {\n                seterrorMessage(null)\n              }, 5000)\n            })\n        }\n      }\n    })\n\n      \n    if(!exists){\n      setPersons(persons.concat(personObject))\n      personService\n        .create(personObject)\n          .then(returnedPerson => {\n            setalertMessage(\n              `Added ${returnedPerson.name}`\n            )\n            setTimeout(() => {\n              setalertMessage(null)\n            }, 5000)\n            setPersons(persons.concat(returnedPerson))\n            setNewName('')\n            setNewNumber('')\n          })\n    }\n  }\n\n  const removePerson = (person) => {\n    if (window.confirm(`Delete ${person.name}?`)) { \n      personService\n        .remove(person.id)\n        .then(removedPerson => {\n          setPersons(persons.filter(p => {\n            return(p.id !== person.id)\n          }))\n        })\n    }\n  }\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n  const handlenumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={alertMessage} type='alert' />\n      <Notification message={errorMessage} type='error'  />\n      <Filter value={filtered} \n              persons={persons}\n              setFiltered={setFiltered}/>\n      <h2>add new contact</h2>\n      <PersonForm addPerson={addPerson}\n                  newName = {newName}\n                  handleNameChange={handleNameChange}\n                  newNumber={newNumber}\n                  handlenumberChange={handlenumberChange} \n                  />\n      <h2>Numbers</h2>\n      <Persons persons={persons} \n               filtered={filtered}\n               removePerson = {removePerson}\n      />\n    </div>\n  )\n\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}